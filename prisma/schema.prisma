// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model client_profile {
  id      Int            @id @default(autoincrement())
  coach   coach_profile? @relation(fields: [coach_profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user    user           @relation("UserToClientProfile", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_id Int            @unique

  coach_profile_id Int?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  deleted_at       DateTime?
}

model user {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  password       String
  email          String          @unique @db.VarChar(255)
  coach_id       Int?
  client_id      Int?
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  // client_profile client_profile
  coach_profile  coach_profile?  @relation("UserToCoachProfile")
  client_profile client_profile? @relation("UserToClientProfile")
  deleted_at     DateTime?
  meal_created   meal[]
  foods_created  food[]
  user_history   logged_meals[]
}

model logged_meals {
  id         Int      @id @default(autoincrement())
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_id    Int
  meal       meal[]   @relation("LoggedMealsToMeal")
  food       food[]   @relation("LoggedMealsToFood")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}

model coach_profile {
  id   Int  @id @default(autoincrement())
  user user @relation("UserToCoachProfile", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  user_id       Int              @unique
  clientProfile client_profile[]
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt
  deleted_at    DateTime?
}

model food {
  id            Int              @id @default(autoincrement())
  name          String
  calories      Float?
  fat           Float?
  protein       Float?
  carbohydrates Float?
  fibre         Float?
  sugar         Float?
  weight        Float
  meals         foods_in_meals[]
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt
  deleted_at    DateTime?
  user_creator  user?            @relation(fields: [user_id], references: [id])
  user_id       Int?
  logged_meals  logged_meals[]   @relation("LoggedMealsToFood")
}

model meal {
  id               Int              @id @default(autoincrement())
  name             String
  foods            foods_in_meals[]
  user_creator     user             @relation(fields: [user_id], references: [id])
  user_id          Int
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  deleted_at       DateTime?
  calories         Float?
  fat              Float?
  protein          Float?
  carbohydrates    Float?
  fibre            Float?
  sugar            Float?
  weight           Float?
  portion          String?
  version          Int              @default(1)
  original_meal_id Int?
  original_meal    meal?            @relation("MealVersions", fields: [original_meal_id], references: [id])
  archived_meals   meal[]           @relation("MealVersions") // Reverse relation to fetch archived versions
  logged_meals     logged_meals[]   @relation("LoggedMealsToMeal")
}

model foods_in_meals {
  meal        meal     @relation(fields: [meal_id], references: [id])
  meal_id     Int
  food        food     @relation(fields: [food_id], references: [id])
  food_id     Int
  assigned_at DateTime @default(now())
  assigned_by String
  servings    Int      @default(1)

  @@id([meal_id, food_id])
}
