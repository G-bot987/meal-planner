// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model client_profile {
  id      Int            @id @default(autoincrement())
  coach   coach_profile? @relation(fields: [coach_profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user    user?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_id Int?           @unique

  coach_profile_id Int?
  foods_created    food[]
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  meal             meal[]
  deleted_at       DateTime?
}

model user {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  password       String
  email          String          @unique @db.VarChar(255)
  coach_id       Int?
  client_id      Int?
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  // client_profile client_profile
  coach_profile  coach_profile?
  client_profile client_profile?
  deleted_at     DateTime?
}

model coach_profile {
  id   Int   @id @default(autoincrement())
  user user? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  user_id       Int?             @unique
  clientProfile client_profile[]
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt
  food          food[]
  meal          meal[]
  deleted_at    DateTime?
}

model food {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(255)
  calories       Float
  fat            Float
  protein        Float
  carbohydrates  Float
  fibre          Float
  sugar          Float
  weight         Float
  client_creator client_profile?  @relation(fields: [client_id], references: [id])
  client_id      Int?
  coach_creator  coach_profile?   @relation(fields: [coach_id], references: [id])
  coach_id       Int?
  meals          foods_in_meals[]
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  deleted_at     DateTime?
}

model meal {
  id             Int              @id @default(autoincrement())
  name           String
  foods          foods_in_meals[]
  client_creator client_profile?  @relation(fields: [client_id], references: [id])
  client_id      Int?
  coach_creator  coach_profile?   @relation(fields: [coach_id], references: [id])
  coach_id       Int?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  deleted_at     DateTime?
}

model foods_in_meals {
  meal        meal     @relation(fields: [meal_id], references: [id])
  meal_id     Int
  food        food     @relation(fields: [food_id], references: [id])
  food_id     Int
  assigned_at DateTime @default(now())
  assigned_by String
  servings    Int      @default(1)

  @@id([meal_id, food_id])
}
